g <- ggplot(dat, aes(x))
g <- ggplot(data, aes(x))
g
data <- data.frame(x = apply(matrix(x, nosim), 1, func, num),
size = factor(rep(40, rep(nosim, 1)))
)
g <- ggplot(dat, aes(x = x, fill = size))
g <- ggplot(data, aes(x = x, fill = size))
g
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
g <- ggplot(data, aes(x = x, fill = size)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
cfunc <- function(x, n) 2 * sqrt(n) * (mean(x) - 0.5)
dat <- data.frame(
x = c(apply(matrix(sample(0:1, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(0:1, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(0:1, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
cfunc <- function(x, n) 2 * sqrt(n) * (mean(x) - 0.5)
dat <- data.frame(
x = c(apply(matrix(sample(0:1, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(0:1, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(0:1, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
rm(list = ls())
lambda <- 0.2
nosim <- 1000
num <- 40
func <- function(x, n) { sqrt(n) * mean(x) }
x <- rexp(nosim * num, lambda)
data <- data.frame(t = apply(matrix(x, nosim), 1, func, num),
size = factor(40, rep(nosim, 1)))
g <- ggplot(data, aes(x = x, fill = size)) + geom_histogram(alpha = 0.2, binwidth = 0.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
rm(data, g, func)
func <- function(x, n) { sqrt((n) * (mean(x) - 1 / lambda) * lambda)}
r <- apply(matrix(x, nosim), 1, func, num)
warnings()
tmp <- x[1:40]
func(tmp, num)
func
(mean(tmp) - 1 / lambda)
rm(func, tmp, r)
func <- function(x, n) { sqrt(n) * (mean(x) - 1 / lambda) * lambda }
t <- apply(matrix(x, nosim), 1, func, num)
hist(t)
x2 <- rep(nosim * 10 * num, lambda = lambda)
t2 <- apply(matrix(x, nosim * 10), 1, func, num)
hist(t2, add = T, col = 'red')
hist(t2)
hist(t)
t2 <- apply(matrix(x2, nosim * 10), 1, func, num)
hist(t2, add = T, col = 'red')
hist(t2, add = T, col = 'red')
hist(t)
hist(t2, add = T, col = 'red')
hist(t2)
rm(t2, x2)
x2 <- rexp(nosim * 10 * num, lambda = lambda)
lambda
x2 <- rexp(nosim * 10 * num, lambda = lambda)
rm(x2)
x2 <- rexp(nosim * 10 * num, lambda)
t <- apply(matrix(x2, nosim * 10), 1, func, num)
rm(t, x, x2)
x <- rexp(nosim * num, lambda = lambda)
x <- rexp(nosim * num, lambda)
t <- apply(matrix(x, nosim), 1, func, num)
func
x2 <- rexp(nosim * num * 10, lambda)
t2 <- apply(matrix(x, nosim * 10), 1, func, num)
hist(t)
hist(t2, add = T, col = 'red')
hist(t2)
num
rm(t2, x2)
dat <- data.frame(
x = t, size = factor(40, rep(nosim, 1)))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = 0.2, binwidth = 0.3, colour = 'black', aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
rm(x, )
rm(x, t)
x <- rexp(nosim * num, lambda)
hist(x)
data <- data.frame(t = apply(matrix(x, nosim), 1, func, num),
size = factor(rep(40, rep(nosim, 1)))
)
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
data <- data.frame(
t = apply(matrix(x, nosim), 1, func, num),
size = factor(rep(40, rep(nosim, 1))))
g <- ggplot(data, aes(x = t, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
mean(x)
1/lambda
var(x)
sqrt(var(x))
hist(runif(1000))
mns = NULL
for (i in 1:1000) { mns = c(mns, mean(runif(40)))}
hist(mns)
rm(list = ls())
rexp
?rexp
library(manipulate)
myHist <- function(mu) {
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red, lwd = 5")
mse <- mean((galton$child - mu) ^ 2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu) {
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red, lwd = 5")
mse <- mean((galton$child - mu) ^ 2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu) {
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse <- mean((galton$child - mu) ^ 2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
plot(galton$parent, galton$child, pch = 19, col = "blue")
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
install.packages("dplyr")
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
library(ggplot2)
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <_ g + scale_size(range = c(2, 20), guide = "none")
g <- g + scale_size(range = c(2, 20), guide = "none")
g <- g + geom_point(colour = "grey50", aes(size = freq + 20, show_guide = F))
g <- g + geom_point(aes(colour = freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high = "white")
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20)
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
View(freqData)
data(galton)
head(galton)
dev.off9)
dev.off())
dev.off()
myPlot <- function(beta) {
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = 0.15 * freqData$freq,
xlab = "parent", ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean((y - beta * x) ^ 2)
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(I(child - mean(child)) ~ I(parent - mean(parent)) - 1, data = galton)
myPlot(0.6463)
?I
lm(I(child - mean(child)) ~ I(parent - mean(parent)) - 2, data = galton)
lm(I(child - mean(child)) ~ I(parent - mean(parent)), data = galton)
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
beta1 <- cor(y, x) * sd(x) / sd(y)
beta0 <- mean(x) - beta1 * mean(y)
rbind(x(beta0, beta1), coef(lm(x ~ y)))
rbind(c(beta0, beta1), coef(lm(x ~ y)))
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
yn <- (y - mean(y)) / sd(y)
xn <- (x - mean(x)) / sd(x)
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn))[2])
rm(list = ls())
library(UsingR)
data(father.son)
y <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho <- cor(x, y)
myPlot <- function(x, y) {
plot(x, y,
xlab = "Father's height, normalized",
ylab = "Son's height, normalized",
xlim = c(-3, 3), ylim = c(-3, 3),
bg = "lightblue", col = "black", cex = 1.1, pch = 21,
frame = F)
}
myPlot(x, y)
abline(0, 1)
abline(0, rho, lwd = 2)
abline(h = 0); abline(v = 0)
rm(list = ls())
library(swirl)
swirl()
fit <- lm( child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef - ic
ols.ic <- fit$coef - fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
it <- var(est(ols.slope, ols.ic))
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
rm(list = ls())
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x)
x - 0.0025
w * x
sum(w * (x - 0.0025) * (x - 0.0025))
min <- function(myu) { sum(w * (x - myu) * (x - myu)) }
min(0.0025)
min(0.3)
min(1.077)
min(0.1471)
rm(list = ls())
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x, y)
lm(I(y - mean(y)) ~ I(x - mean(x)) - 1)
lm(y ~ x)
rm(list = ls())
data(mtcars)
head(mtcars)
lm(mpg ~ wt)
lm(mpg ~ wt, data = mtcars)
1.5 * 0.4
rm(list = ls())
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x[1] - mean(x)) / sd(x)
rm(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
dev.off()
plot(x,y)
lm(y ~ x)
x <- x - mean(x)
y <- y - mean(y)
plot(x, y)
fit <- lm(y ~ x)
plot(fit)
dev.off()
plot(x, y)
fit[1]
fit$coefficients
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
rm(y, fit)
кь9ч
rm(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
res <- function(myu) {
sum((x - myu) * (x - myu))
}
res(0.573)
res(0.8)
res(0.36)
res(0.44)
rm(list = ls())
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm(x ~ y)
beta <- lm(y ~ x)[1]
gamma <- lm(x ~ y)[1]
beta <- lm(y ~ x)[2]
gamma <- lm(x ~ y)[2]
beta
beta <- lm(y ~ x)$x
beta
lm(y ~ x)$coefficients
beta <- lm(y ~ x)$coefficients[2]
gamma <- lm(x ~ y)$coefficients[2]
beta / gamma
names(beta)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm(I(y - mean(y)) ~ I(x - mean(x) - 1))
lm(I(y) ~ I(x)
)
lm(I(y) ~ I(x - 1))
plot(x, y)
rm(list = ls())
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x * y
0.42 * 0.05
sum(y * x) / sum(x * x)
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:10, t(dataMatrix)[ , nrow(dataMatrix):1])
image(1:10, 1:40, t(dataMatrix)[ , nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
?write.table
getwd()
write.table(dataMatrix, "dataMatrix.txt")
write.table(dataMatrix, "dataMatrix.txt", row.names = F, col.names = F)
set.seed(678910)
for (i in 1:40) {
coinFlip <- rbinom(1, size = 1, prob = 0.5)
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(0.2, 4))
rep(c(0, 3), each = 5)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
write.table(dataMatrix, "dataMatrix.txt", row.names = F, col.names = F)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
dist(dataMatrix)
dist1 <- dist(dataMatrix)
dist1
View(dataMatrixOrdered)
hh
View(dataMatrix)
View(dataMatrixOrdered)
hh$order
hh
hh$order
unique(hh$order)
length(unique(hh$order))
hh
hh$order
class(dist1)
dist1
mean(dataMatrixOrdered[1,])
mean(dataMatrixOrdered[2,])
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d ^ 2 / sum(svd1$d ^ 2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
pca1 <- prcomp(dataMatrixOrdered, scale = T)
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1", ylab = "Right Singular Vector 1")
abline(c(0, 1))
rm(list = ls())
getwd()
setwd("SHIP\\kaggle_contest\\higgs-ml")
set1 <- 1:10
set2 <- 5:15
set3 <- 8:12
area1 <- length(set1)
area2 <- length(set2)
area3 <- length(set3)
in12 <- length(intersect(set1, set2))
in13 <- length(intersect(set1, set3))
in23 <- length(intersect(set2, set3))
in123 <- length(intersect(set1, intersect(set2, set3)))
library(vennDiagram)
library(VennDiagram)
venn.plot <- draw.triple.venn(area1, area2, area3, in12, in23, in13, in123,
category = c("Set1", "Set2", "Set3"), fill = c("blue", "red", "green"),
lty = "blank", cat.col = rep("black", 3))
